
// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

import './TimeUnit.sol';
import './CommitReveal.sol';

interface IERC20 {
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
}

contract RPS {
    IERC20 public token;
    uint256 public constant ENTRY_FEE = 1 gwei; // 0.000001 Ether in gwei

    TimeUnit public timeUnit = new TimeUnit();
    CommitReveal public commitReveal = new CommitReveal();

    constructor (address tokenAddress, address timeUnitAddress, address commitRevealAddress) {
        token = IERC20(tokenAddress);
        timeUnit = TimeUnit(timeUnitAddress);
        commitReveal = CommitReveal(commitRevealAddress);
        timeUnit.setStartTime();
    }

    // variables
    uint public numPlayer = 0;
    uint public reward = 0;
    mapping(address => bool) public player_not_played;
    mapping(address => uint) public player_choice;
    address[] public players;
    uint public numInput = 0;
    uint public numRevealed = 0;

    function addPlayer() public payable {
        //to add player, the number of total players must be < 2
        require(numPlayer < 2);
        // // allow only 4 accounts
        // require(msg.sender == 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4 ||
        //         msg.sender == 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2 ||
        //         msg.sender == 0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db ||
        //         msg.sender == 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB);
        //unique player
        if (numPlayer > 0) {
            require(msg.sender != players[0]);
        }
        require(
            token.allowance(msg.sender, address(this)) >= ENTRY_FEE,
            "Please approve the contract to spend your tokens"
        );

        //only 1 ETH per player
        // require(msg.value == 0.1 gwei);
        // //inc reward
        // reward += msg.value;

        //join the game but doesn't play yet
        player_not_played[msg.sender] = true;
        //add player's addr to the array
        players.push(msg.sender);
        //inc number of player
        numPlayer++;
    }

    function abort() public {
        // you are very lonely
        if(numPlayer == 1 && timeUnit.elapsedMinutes() > 3 minutes){
            address payable account0 = payable(players[0]);
            account0.transfer(reward); 
            reward = 0;
        }
        // the other player won't make their choice
        else if (numPlayer == 2 && numInput == 1 && timeUnit.elapsedMinutes() > 3 minutes) {
            // address payable account0 = payable(players[0]);
            // address payable account1 = payable(players[1]);
            // account0.transfer(reward / 2);
            // account1.transfer(reward / 2); 
            // reward = 0;
            address payable caller = payable(msg.sender);
            caller.transfer(reward);
            reward = 0;
        }
    }

    function input(bytes32 choice) public  {
        //two players only
        require(numPlayer == 2);
        //no choice choosen for that player
        require(player_not_played[msg.sender]);
        // allow only 0-4
        uint nchoice = uint256(choice) & 0xff;
        require(nchoice >= 0 && nchoice <= 4, "Please enter a valid number");
        //commit choice
        commitReveal.commit(msg.sender,commitReveal.getHash(choice));
        //assign false to player who doesn't choose yet
        player_not_played[msg.sender] = false;
        //inc the number of input
        numInput++;
        if(numInput == 2) {
            //transfer to the contract
            token.transferFrom(msg.sender, address(this), ENTRY_FEE);
            reward += ENTRY_FEE;
        }
    }


    function reveal(bytes32 hash) public {
        require(numInput == 2,"All players must make their choice before reveal");
        commitReveal.reveal(msg.sender,hash);
        //obtain the choice which is the last character of the string
        player_choice[msg.sender] = uint256(hash) & 0xff;
        numRevealed++;
        if (numRevealed == 2) {
            _checkWinnerAndPay();
        }
    }

    function _checkWinnerAndPay() private {
        // players choices
        uint p0Choice = player_choice[players[0]];
        uint p1Choice = player_choice[players[1]];
        // player's accounts
        address payable account0 = payable(players[0]);
        address payable account1 = payable(players[1]);
        // rock paper scissor lizard spock
        if ((p0Choice + 1) % 5 == p1Choice || (p0Choice + 3) % 5 == p1Choice) {
            // to pay player[1]
            account1.transfer(reward);
        }
        else if ((p1Choice + 1) % 5 == p0Choice || (p1Choice + 3) % 5 == p0Choice) {
            // to pay player[0]
            account0.transfer(reward);    
        }
        else {
            // to split reward
            account0.transfer(reward / 2);
            account1.transfer(reward / 2);
        }
        reward = 0;
    }
}
